Help center
Advanced-featuresCMS
https://wix.wixanswers.com/apps/widget/v1/wix/53f85d67-f8b0-41ca-9dc8-5a16390cc74f/view/en/category/53b0124d-abde-4e9e-8c38-bebae5356dbd

Velo by Wix是一个全栈开发环境，允许开发者使用JavaScript在Wix网站上添加自定义功能。它不仅涵盖了前端开发，还包括后端功能。

### Velo是前端框架吗？
Velo不仅仅是一个前端框架。它提供了一整套工具和API，用于在Wix平台上进行前端和后端开发。前端部分允许开发者使用JavaScript和Wix的内部API来创建动态和交互式的网页元素。

### 前端框架和Node.js的关系
1. **前端开发**：
   - Velo提供了前端开发工具和API，如Wix Location、Window和Storage API，用于处理页面元素和用户交互[2][3]。

2. **后端开发**：
   - Velo的后端运行时环境基于Node.js，这意味着你可以在Velo的后端代码中使用Node.js的功能和模块[5]。
   - 支持现代JavaScript特性和NPM包，使前后端代码共享变得容易[5]。

### 总结
Velo by Wix是一个全栈开发环境，结合了前端和基于Node.js的后端开发能力，提供了一个强大且灵活的平台来创建和管理Wix网站的自定义功能。

Wix Velo与Node.js的关系如下：

1. **服务器端运行时**：
   - Velo提供了一个基于Node.js的服务器端运行时环境。这意味着你可以在Velo的后端代码中使用Node.js的功能和模块[2][4]。

2. **无服务器架构**：
   - Velo采用无服务器架构，所有后端代码都在Wix的云服务器上运行，无需开发者设置和维护服务器[2][4]。

3. **NPM包支持**：
   - Velo允许安装和使用NPM包，以扩展功能并与第三方服务集成[2][5]。

4. **JavaScript支持**：
   - Velo支持现代JavaScript特性，并允许在前端和后端共享JavaScript代码[1][4]。

通过这些特性，Velo结合了Node.js的强大功能和Wix平台的易用性，提供了一个灵活且强大的开发环境。

Velo后端代码使用Node.js可以实现以下功能：

1. **API集成**：
   - 使用Fetch API或NPM包与第三方服务（如SendGrid、Twilio、Stripe）进行集成，实现发送邮件、短信、支付处理等功能[1][3].

2. **数据库操作**：
   - 通过Wix Data API与内置数据库或外部数据库进行交互，执行CRUD（创建、读取、更新、删除）操作[3].

3. **服务器端逻辑**：
   - 编写复杂的业务逻辑和数据处理代码，并在服务器端执行，以提高性能和安全性[3].

4. **HTTP函数**：
   - 创建HTTP函数，暴露自定义API端点，让外部应用程序可以与您的Wix网站交互[3].

5. **定时任务**：
   - 使用调度任务功能，在指定的时间间隔运行代码，例如定期清理数据或发送提醒[3].

通过这些功能，Velo后端代码可以大大扩展Wix网站的功能和交互性。

Wix内置的数据库系统是Wix Data,它是一个云端数据库服务,具有以下特点:

1. 无需服务器管理：Wix Data是一个完全托管的云数据库,开发者无需关心服务器维护和扩展。

2. 集合(Collections)：数据以集合的形式组织,类似于传统数据库中的表。

3. 内置权限控制：可以设置细粒度的数据访问权限。

4. 实时和沙盒数据：支持实时数据和沙盒数据环境,方便开发和测试。

5. 动态页面支持：可以轻松创建从数据库获取内容的动态页面。

6. API支持：提供JavaScript API,可以在Velo中进行CRUD操作。

7. 导入/导出功能：支持CSV格式的数据导入和导出。

8. 与Wix编辑器集成：可以直接在Wix编辑器中管理数据。

9. 自动生成的唯一ID：每条记录自动分配唯一ID。

10. 支持多种数据类型：包括文本、数字、日期、图像等。

Wix Data作为Wix平台的一部分,为开发者提供了一个简单但功能强大的数据存储和管理解决方案,特别适合构建动态网站和Web应用程序。

在Wix的CMS中，一个用户可以创建多个数据集（dataset），每个数据集可以连接到不同的内容集合（collection）[1][5]。

**My Collection** 和 **Dataset** 的关系如下：

- **Collection**：这是存储内容的数据库表格，可以包含多个字段和记录。
- **Dataset**：这是连接页面元素和内容集合的桥梁。通过数据集，页面元素可以读取、显示或写入集合中的内容[1][5]。

数据集允许你选择要显示的集合字段，并控制数据的读取和写入方式，从而实现动态内容管理[1][5]。

CMS (内容管理系统)和dataset (数据集)在Wix中有密切的关系:

1. 数据存储:
   - CMS是存储内容的地方,包含各种集合(collections)。
   - Dataset是连接CMS集合和网页元素的桥梁。

2. 数据展示:
   - Dataset从CMS集合中获取数据,并将其提供给网页元素显示[1]。
   - 可以通过Dataset控制显示哪些内容、显示顺序和数量[1]。

3. 数据操作:
   - Dataset的模式(Read, Write, Read & Write)决定了与CMS集合的交互方式[5]。
   - 可以通过Dataset设置来过滤、排序CMS中的内容[3]。

4. 表单提交:
   - 使用Write或Read & Write模式的Dataset可以将用户输入直接提交到CMS集合中[1]。

5. 动态页面:
   - Dataset对动态列表页面和动态项目页面至关重要,它们连接CMS内容和页面元素[1]。

6. 全局访问:
   - 可以设置Dataset在所有页面上可用,实现全站范围内的CMS数据访问[4]。

总之,Dataset作为中间层,使得网页元素能够灵活地读取和写入CMS中的数据,实现了内容的动态管理和展示。

Dataset怎么控制数据写入collection 
1. 数据集模式设置:
   - 将数据集模式设置为"Write"或"Read & Write"才允许写入数据[3][4]。
   - "Write"模式只允许添加新数据。
   - "Read & Write"模式允许添加新数据和修改现有数据[1]。

2. 提交操作:
   - 可以为按钮或图片元素设置"Submit"点击操作,将输入元素中的数据提交到collection[5]。
   - 在"Write"模式下,提交会创建新项目。
   - 在"Read & Write"模式下,提交会更新当前显示的项目[5]。

3. 新建操作:
   - 可以设置"New"点击操作来在collection中创建新项目[5]。

4. 输入元素连接:
   - 将输入元素(如文本框、下拉菜单等)连接到数据集,允许访问者直接向collection提交内容[4]。

5. 权限控制:
   - 可以限制只有网站成员才能提交数据,或在collection中设置自定义权限[4]。

通过这些方法,dataset作为网页元素和collection之间的桥梁,控制着数据的写入过程和权限。

1. **创建Collection**：
   - 在Wix的内容管理器中创建一个新的collection，包含“姓名”和“邮箱”字段。

2. **添加数据集**：
   - 在页面上添加一个数据集（dataset），并将其连接到您创建的collection。
   - 设置数据集模式为“Write”或“Read & Write”。

3. **添加输入元素**：
   - 在页面上添加两个文本输入框，一个用于姓名，一个用于邮箱。
   - 选择每个输入框，点击“连接到数据集”图标，将其分别连接到数据集中的“姓名”和“邮箱”字段。
